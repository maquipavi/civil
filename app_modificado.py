import streamlit as st
import google.generativeai as genai
import os
import datetime

# --- Constantes e Configura√ß√£o Inicial ---
GOOGLE_API_KEY = "AIzaSyBarB5CfRsl_M0nkQjgg-ystWV-CyzN0jU" # Chave API Fixa

# Configura a API do Google
try:
    genai.configure(api_key=GOOGLE_API_KEY)
except Exception as e:
    st.error(f"Erro cr√≠tico ao configurar a API do Google com a chave fornecida: {e}")
    st.stop() # Impede a execu√ß√£o do restante do app se a chave for inv√°lida

# --- Configura√ß√£o da P√°gina Streamlit ---
st.set_page_config(page_title="Guia de Linha Amarela", page_icon="üöú", layout="wide")

# --- Estado da Sess√£o ---
# Inicializa o estado da sess√£o se n√£o existir
if 'model' not in st.session_state:
    try:
        st.session_state.model = genai.GenerativeModel(
            model_name='gemini-1.5-flash', # Modelo recomendado
            system_instruction="""Voc√™ √© um assistente virtual especializado em engenharia civil, focado em m√°quinas pesadas de linha amarela (escavadeiras, p√°s-carregadeiras, tratores de esteira, motoniveladoras, rolos compactadores, etc.) e t√©cnicas de pavimenta√ß√£o. Seu objetivo √© funcionar como um guia completo para engenheiros, fornecendo informa√ß√µes t√©cnicas precisas, especifica√ß√µes de equipamentos, compara√ß√µes, boas pr√°ticas de opera√ß√£o, manuten√ß√£o preventiva e corretiva, e auxiliando na resolu√ß√£o de d√∫vidas relacionadas a essa √°rea. Responda de forma clara, objetiva e profissional, utilizando terminologia t√©cnica apropriada. Se a pergunta for amb√≠gua, pe√ßa esclarecimentos. Se n√£o souber a resposta, admita e sugira onde o usu√°rio pode buscar a informa√ß√£o. Evite opini√µes pessoais e foque em dados e fatos t√©cnicos. N√£o forne√ßa informa√ß√µes sobre pre√ßos, pois eles variam muito. Se perguntado sobre pre√ßos, explique que o usu√°rio deve contatar distribuidores autorizados."""
        )
        st.session_state.chat = st.session_state.model.start_chat(history=[])
        st.session_state.messages = []
        st.session_state.topic_selected = False # Para controlar o estado inicial
    except Exception as e:
        st.error(f"Erro ao inicializar o modelo generativo: {e}")
        st.stop()

# --- Barra Lateral (Menu) ---
st.sidebar.title("Guia de Linha Amarela para Engenheiros")
st.sidebar.image("heavy_equipment_sidebar.jpeg", caption="Guia de Linha Amarela") # Imagem local
st.sidebar.markdown("**Navegue pelos t√≥picos:**")

topics = [
    "Vis√£o Geral",
    "Tipos de Equipamentos",
    "Aplica√ß√µes Comuns",
    "Opera√ß√£o Segura e Eficiente",
    "Manuten√ß√£o Preventiva e Corretiva"
]

# Usando radio buttons para sele√ß√£o √∫nica de t√≥pico
selected_topic = st.sidebar.radio("Selecione um T√≥pico:", topics, index=0) # Come√ßa com Vis√£o Geral

# Bot√£o para iniciar chat sobre o t√≥pico (opcional, pode iniciar direto)
if st.sidebar.button(f"Iniciar Chat sobre {selected_topic}"):
    st.session_state.topic_selected = True
    # Limpa mensagens anteriores ao mudar de t√≥pico
    st.session_state.messages = [] 
    st.session_state.chat = st.session_state.model.start_chat(history=[]) # Reinicia o chat para novo contexto
    # Envia uma mensagem inicial contextualizando o t√≥pico
    initial_prompt = f"Gere uma introdu√ß√£o sobre '{selected_topic}' no contexto de m√°quinas pesadas de linha amarela para engenheiros."
    st.session_state.messages.append({"role": "user", "content": initial_prompt})
    try:
        with st.spinner(f"Gerando introdu√ß√£o sobre {selected_topic}..."):
            response = st.session_state.chat.send_message(initial_prompt)
            st.session_state.messages.append({"role": "assistant", "content": response.text})
    except Exception as e:
        st.error(f"Erro ao gerar introdu√ß√£o: {e}")
    st.rerun() # Recarrega para exibir a introdu√ß√£o

st.sidebar.markdown("--- ")
st.sidebar.info("Este assistente utiliza IA Generativa para fornecer informa√ß√µes t√©cnicas. Desenvolvido com ‚ù§Ô∏è por Eng¬∫ Paulo Rog√©rio Veiga Silva!")

# --- √Årea Principal do Chat ---
st.title(f"üöú Assistente T√©cnico: {selected_topic}")

if not st.session_state.topic_selected and selected_topic == "Vis√£o Geral":
     st.info("Bem-vindo ao Guia de Linha Amarela para Engenheiros! Selecione um t√≥pico na barra lateral para come√ßar ou fa√ßa uma pergunta geral abaixo.")
     st.session_state.topic_selected = True # Marca como selecionado para n√£o mostrar a msg de novo

# Exibe o hist√≥rico de mensagens
if 'messages' in st.session_state:
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

# Campo de entrada para nova pergunta
if prompt := st.chat_input(f"Fa√ßa sua pergunta sobre {selected_topic}..."):
    # Adiciona a mensagem do usu√°rio ao hist√≥rico e exibe
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # Gera e exibe a resposta do assistente
    with st.chat_message("assistant"):
        message_placeholder = st.empty()
        message_placeholder.markdown("Pensando...")
        try:
            # Verifica se o chat foi iniciado corretamente
            if st.session_state.chat is None:
                 st.error("Erro: A sess√£o de chat n√£o foi inicializada corretamente. Tente recarregar a p√°gina.")
            else:
                response = st.session_state.chat.send_message(prompt)
                message_placeholder.markdown(response.text)
                # Adiciona a resposta do assistente ao hist√≥rico
                st.session_state.messages.append({"role": "assistant", "content": response.text})
        except Exception as e:
             message_placeholder.error(f"Desculpe, ocorreu um erro ao processar sua pergunta: {e}")
             # Adiciona uma mensagem de erro ao hist√≥rico para contexto
             st.session_state.messages.append({"role": "assistant", "content": f"Erro ao gerar resposta: {e}"})

# --- Funcionalidade para Salvar Conversa ---
if st.session_state.messages: # S√≥ mostra o bot√£o se houver mensagens
    st.markdown("--- ") # Separador
    # Formata a conversa para salvar
    conversation_history = """# Hist√≥rico da Conversa - Guia de Linha Amarela\n\n**T√≥pico:** {}\n**Data:** {}\n\n---\n\n""".format(selected_topic, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    for msg in st.session_state.messages:
        conversation_history += f"**{msg['role'].capitalize()}:**\n{msg['content']}\n\n---\n"
    
    # Gera um nome de arquivo √∫nico
    filename = f"historico_assistente_civil_{selected_topic.lower().replace(' ', '_')}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
    
    st.download_button(
        label="üíæ Salvar Conversa Atual",
        data=conversation_history,
        file_name=filename,
        mime="text/markdown",
        help="Clique para baixar o hist√≥rico desta conversa em formato Markdown."
    )


